[Qibo 0.2.7|INFO|2024-07-23 13:21:19]: Using qibojit (numba) backend on /CPU:0
2024-07-23 13:21:20,977 - qm - INFO     - Starting session: ed997915-0408-4141-8d50-7fb71402d140
Generating circuits of len: 3
Traceback (most recent call last):
  File "/nfs/users/simone.bordoni/qibolab/src/qibolab/platform/platform.py", line 149, in connect
    instrument.connect()
  File "/nfs/users/simone.bordoni/qibolab/src/qibolab/instruments/qm/controller.py", line 212, in connect
    octave = declare_octaves(self.octaves, host, self.calibration_path)
  File "/nfs/users/simone.bordoni/qibolab/src/qibolab/instruments/qm/controller.py", line 42, in declare_octaves
    config.set_calibration_db(calibration_path)
  File "/nfs/users/simone.bordoni/rl/lib/python3.10/site-packages/qm/octave/octave_config.py", line 171, in set_calibration_db
    self._calibration_db = CalibrationDB(self._calibration_db_path)
  File "/nfs/users/simone.bordoni/rl/lib/python3.10/site-packages/qm/octave/calibration_db.py", line 95, in __init__
    self._db = TinyDB(self._file_path, indent=4, separators=(",", ": "), storage=JSONStorage)
  File "/nfs/users/simone.bordoni/rl/lib/python3.10/site-packages/tinydb/database.py", line 94, in __init__
    self._storage: Storage = storage(*args, **kwargs)
  File "/nfs/users/simone.bordoni/rl/lib/python3.10/site-packages/tinydb/storages.py", line 113, in __init__
    touch(path, create_dirs=create_dirs)
  File "/nfs/users/simone.bordoni/rl/lib/python3.10/site-packages/tinydb/storages.py", line 32, in touch
    with open(path, 'a'):
PermissionError: [Errno 13] Permission denied: '/nfs/tools/qibolab_platforms_qrc/qw11q/calibration_db.json'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/nfs/users/simone.bordoni/rl-noisemodel/./simulation/rb_dataset_generator.py", line 27, in <module>
    rb_dataset_generator(config_file,backend)
  File "/nfs/users/simone.bordoni/rl-noisemodel/src/rlnoise/randomized_benchmarking.py", line 16, in rb_dataset_generator
    dataset.generate_rb_dataset(backend)
  File "/nfs/users/simone.bordoni/rl-noisemodel/src/rlnoise/dataset.py", line 83, in generate_rb_dataset
    result = state_tomography(circuits, nshots, likelihood, backend)
  File "/nfs/users/simone.bordoni/rl-noisemodel/src/rlnoise/utils_hardware.py", line 341, in state_tomography
    st._get_cal_mat()
  File "/nfs/users/simone.bordoni/rl-noisemodel/src/rlnoise/utils_hardware.py", line 252, in _get_cal_mat
    self.cal_mat = calibration_matrix(
  File "/nfs/users/simone.bordoni/rl-noisemodel/src/rlnoise/utils_hardware.py", line 159, in calibration_matrix
    results = backend.execute_circuit_(cal_circs, nshots=nshots)
  File "/nfs/users/simone.bordoni/rl-noisemodel/src/rlnoise/utils_hardware.py", line 119, in execute_circuit_
    results = self.execute_circuits(circuits, nshots=nshots)
  File "/nfs/users/simone.bordoni/qibolab/src/qibolab/backends.py", line 148, in execute_circuits
    self.platform.connect()
  File "/nfs/users/simone.bordoni/qibolab/src/qibolab/platform/platform.py", line 151, in connect
    raise_error(
  File "/nfs/users/simone.bordoni/rl/lib/python3.10/site-packages/qibo/config.py", line 46, in raise_error
    raise exception(message)
RuntimeError: Cannot establish connection to QMController(name='qm', address='192.168.0.101:80', opxs={'con2': OPXplus(name='con2', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e846e6170>, {1: OPXOutput(device='con2', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con2', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con2', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con2', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con2', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con2', number=8, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83e9bd00>, {1: OPXInput(device='con2', number=1, offset=0.0, gain=10), 2: OPXInput(device='con2', number=2, offset=0.0, gain=10)})), 'con3': OPXplus(name='con3', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83e9bd90>, {1: OPXOutput(device='con3', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con3', number=2, offset=0.0, filter={}), 7: OPXOutput(device='con3', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con3', number=8, offset=0.0, filter={}), 5: OPXOutput(device='con3', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con3', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83e9be20>, {})), 'con4': OPXplus(name='con4', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83e9beb0>, {1: OPXOutput(device='con4', number=1, offset=-0.085, filter={}), 2: OPXOutput(device='con4', number=2, offset=0.376, filter={}), 3: OPXOutput(device='con4', number=3, offset=0.47, filter={}), 4: OPXOutput(device='con4', number=4, offset=0.49, filter={}), 5: OPXOutput(device='con4', number=5, offset=-0.058, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83e9bf40>, {})), 'con5': OPXplus(name='con5', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec0040>, {1: OPXOutput(device='con5', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con5', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con5', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con5', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con5', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con5', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con5', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con5', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con5', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con5', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec00d0>, {1: OPXInput(device='con5', number=1, offset=0.0, gain=0), 2: OPXInput(device='con5', number=2, offset=0.0, gain=0)})), 'con6': OPXplus(name='con6', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec0160>, {1: OPXOutput(device='con6', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con6', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con6', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con6', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con6', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con6', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con6', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con6', number=10, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec01f0>, {1: OPXInput(device='con6', number=1, offset=0.0, gain=10), 2: OPXInput(device='con6', number=2, offset=0.0, gain=10)})), 'con7': OPXplus(name='con7', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec0280>, {3: OPXOutput(device='con7', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con7', number=4, offset=0.0, filter={}), 5: OPXOutput(device='con7', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con7', number=6, offset=0.0, filter={}), 7: OPXOutput(device='con7', number=7, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec0310>, {})), 'con8': OPXplus(name='con8', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec03a0>, {3: OPXOutput(device='con8', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con8', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con8', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con8', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con8', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con8', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con8', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con8', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec0430>, {})), 'con9': OPXplus(name='con9', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec04c0>, {3: OPXOutput(device='con9', number=3, offset=-0.13, filter={}), 4: OPXOutput(device='con9', number=4, offset=0.134, filter={}), 5: OPXOutput(device='con9', number=5, offset=-0.438, filter={}), 6: OPXOutput(device='con9', number=6, offset=-0.002, filter={}), 7: OPXOutput(device='con9', number=7, offset=-0.031, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec0550>, {}))}, octaves={'octave2': Octave(name='octave2', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec05e0>, {1: OctaveOutput(device='octave2', number=1, lo_frequency=7430000000, gain=-10, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con2', number=1, offset=0.0, filter={}), q=OPXOutput(device='con2', number=2, offset=0.0, filter={}))), 2: OctaveOutput(device='octave2', number=2, lo_frequency=4800000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con2', number=3, offset=0.0, filter={}), q=OPXOutput(device='con2', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave2', number=4, lo_frequency=6100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con2', number=7, offset=0.0, filter={}), q=OPXOutput(device='con2', number=8, offset=0.0, filter={}))), 3: OctaveOutput(device='octave2', number=3, lo_frequency=4800000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None), 5: OctaveOutput(device='octave2', number=5, lo_frequency=6100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec0670>, {1: OctaveInput(device='octave2', number=1, lo_frequency=7430000000, lo_source='internal', IF_mode_I='direct', IF_mode_Q='direct', opx_port=OPXIQ(i=OPXInput(device='con2', number=1, offset=0.0, gain=10), q=OPXInput(device='con2', number=2, offset=0.0, gain=10)))}), port=101, connectivity=OPXplus(name='con2', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e846e6170>, {1: OPXOutput(device='con2', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con2', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con2', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con2', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con2', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con2', number=8, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83e9bd00>, {1: OPXInput(device='con2', number=1, offset=0.0, gain=10), 2: OPXInput(device='con2', number=2, offset=0.0, gain=10)}))), 'octave3': Octave(name='octave3', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec0700>, {1: OctaveOutput(device='octave3', number=1, lo_frequency=5800000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con3', number=1, offset=0.0, filter={}), q=OPXOutput(device='con3', number=2, offset=0.0, filter={}))), 4: OctaveOutput(device='octave3', number=4, lo_frequency=6600000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con3', number=7, offset=0.0, filter={}), q=OPXOutput(device='con3', number=8, offset=0.0, filter={}))), 3: OctaveOutput(device='octave3', number=3, lo_frequency=5900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con3', number=5, offset=0.0, filter={}), q=OPXOutput(device='con3', number=6, offset=0.0, filter={}))), 2: OctaveOutput(device='octave3', number=2, lo_frequency=5900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None), 5: OctaveOutput(device='octave3', number=5, lo_frequency=6600000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec0790>, {}), port=102, connectivity=OPXplus(name='con3', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83e9bd90>, {1: OPXOutput(device='con3', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con3', number=2, offset=0.0, filter={}), 7: OPXOutput(device='con3', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con3', number=8, offset=0.0, filter={}), 5: OPXOutput(device='con3', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con3', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83e9be20>, {}))), 'octave4': Octave(name='octave4', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec0820>, {1: OctaveOutput(device='octave4', number=1, lo_frequency=7520000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=1, offset=0.0, filter={}), q=OPXOutput(device='con5', number=2, offset=0.0, filter={}))), 2: OctaveOutput(device='octave4', number=2, lo_frequency=4900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=3, offset=0.0, filter={}), q=OPXOutput(device='con5', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave4', number=4, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=7, offset=0.0, filter={}), q=OPXOutput(device='con5', number=8, offset=0.0, filter={}))), 5: OctaveOutput(device='octave4', number=5, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=9, offset=0.0, filter={}), q=OPXOutput(device='con5', number=10, offset=0.0, filter={}))), 3: OctaveOutput(device='octave4', number=3, lo_frequency=4900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=5, offset=0.0, filter={}), q=OPXOutput(device='con5', number=6, offset=0.0, filter={})))}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec08b0>, {1: OctaveInput(device='octave4', number=1, lo_frequency=7520000000, lo_source='internal', IF_mode_I='direct', IF_mode_Q='direct', opx_port=OPXIQ(i=OPXInput(device='con5', number=1, offset=0.0, gain=0), q=OPXInput(device='con5', number=2, offset=0.0, gain=0)))}), port=103, connectivity=OPXplus(name='con5', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec0040>, {1: OPXOutput(device='con5', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con5', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con5', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con5', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con5', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con5', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con5', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con5', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con5', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con5', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec00d0>, {1: OPXInput(device='con5', number=1, offset=0.0, gain=0), 2: OPXInput(device='con5', number=2, offset=0.0, gain=0)}))), 'octave5': Octave(name='octave5', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec0940>, {1: OctaveOutput(device='octave5', number=1, lo_frequency=7450000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=1, offset=0.0, filter={}), q=OPXOutput(device='con6', number=2, offset=0.0, filter={}))), 2: OctaveOutput(device='octave5', number=2, lo_frequency=5100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=3, offset=0.0, filter={}), q=OPXOutput(device='con6', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave5', number=4, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=7, offset=0.0, filter={}), q=OPXOutput(device='con6', number=8, offset=0.0, filter={}))), 5: OctaveOutput(device='octave5', number=5, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=9, offset=0.0, filter={}), q=OPXOutput(device='con6', number=10, offset=0.0, filter={}))), 3: OctaveOutput(device='octave5', number=3, lo_frequency=5100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec09d0>, {1: OctaveInput(device='octave5', number=1, lo_frequency=7450000000, lo_source='internal', IF_mode_I='direct', IF_mode_Q='direct', opx_port=OPXIQ(i=OPXInput(device='con6', number=1, offset=0.0, gain=10), q=OPXInput(device='con6', number=2, offset=0.0, gain=10)))}), port=104, connectivity=OPXplus(name='con6', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec0160>, {1: OPXOutput(device='con6', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con6', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con6', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con6', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con6', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con6', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con6', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con6', number=10, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec01f0>, {1: OPXInput(device='con6', number=1, offset=0.0, gain=10), 2: OPXInput(device='con6', number=2, offset=0.0, gain=10)}))), 'octave6': Octave(name='octave6', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec0a60>, {2: OctaveOutput(device='octave6', number=2, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=3, offset=0.0, filter={}), q=OPXOutput(device='con8', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave6', number=4, lo_frequency=6400000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=7, offset=0.0, filter={}), q=OPXOutput(device='con8', number=8, offset=0.0, filter={}))), 5: OctaveOutput(device='octave6', number=5, lo_frequency=6400000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=9, offset=0.0, filter={}), q=OPXOutput(device='con8', number=10, offset=0.0, filter={}))), 3: OctaveOutput(device='octave6', number=3, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=5, offset=0.0, filter={}), q=OPXOutput(device='con8', number=6, offset=0.0, filter={}))), 1: OctaveOutput(device='octave6', number=1, lo_frequency=4900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7f6e83ec0af0>, {}), port=105, connectivity=OPXplus(name='con8', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec03a0>, {3: OPXOutput(device='con8', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con8', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con8', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con8', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con8', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con8', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con8', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con8', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7f6e83ec0430>, {})))}, time_of_flight=224, smearing=0, bounds=Bounds(waveforms=40000, readout=30, instructions=1000000), calibration_path=PosixPath('/nfs/tools/qibolab_platforms_qrc/qw11q'), script_file_name=None, manager=None, config=QMConfig(version=1, controllers={}, octaves={}, elements={}, pulses={}, waveforms={}, digital_waveforms={'ON': {'samples': [(1, 0)]}}, integration_weights={}, mixers={}), is_connected=False, simulation_duration=None, cloud=False) instruments. Error captured: '[Errno 13] Permission denied: '/nfs/tools/qibolab_platforms_qrc/qw11q/calibration_db.json''
Exception ignored in: <function CalibrationDB.__del__ at 0x7f6e90311240>
Traceback (most recent call last):
  File "/nfs/users/simone.bordoni/rl/lib/python3.10/site-packages/qm/octave/calibration_db.py", line 98, in __del__
    self._db.close()
AttributeError: 'CalibrationDB' object has no attribute '_db'
